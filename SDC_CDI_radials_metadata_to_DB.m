%% SDC_CDI_radials_metadata_to_DB.m
% This application reads global attributes from the historical radial
% dataset and insert them into the database for to be read by the Mikado
% configuration file.

% Author: Lorenzo Corgnati
% Date: August 28, 2019

% E-mail: lorenzo.corgnati@sp.ismar.cnr.it
%%

warning('off', 'all');

CDIrDB_err = 0;

disp(['[' datestr(now) '] - - ' 'SDC_CDI_radials_metadata_to_DB started.']);

%%

%% Read global attributes from historical dataset and insert them into the database

% Set dataset name
ncfile = [strtrim(station_data{station_idx,find(not(cellfun('isempty', strfind(station_columnNames, 'SDC_folder_path'))))}) filesep station_data{station_idx,station_idIndex} filesep datasetName];

% Set and execute the query
try
    % Delete the eventually present entry with the same name from the database
    platformCode_deletequery = ['DELETE FROM radial_CDIconf_tb WHERE platform_code = ' '''' ncreadatt(ncfile,'/','platform_code') ''''];
    platformCode_deletecurs = exec(conn,platformCode_deletequery);
    
    % Define a cell array containing the column names to be added
    addColnames = {'platform_code' 'cdi_identifier' 'filename' 'institution_edmo_code' ...
        'partner_edmo_code' 'custodian_edmo_code' 'distributor_edmo_code' ...
        'feature_type' 'reference_system' 'title' ...
        'date_modified' 'summary' ...
        'parameters' 'instrument' 'source' 'source_platform_category_code' ...
        'projects' 'dataset_access_restriction' 'site_code' 'operational_from' ...
        'operational_from_network' ...
        'time_coverage_resolution' ...
        'time_coverage_resolution_units' 'geospatial_lon_min' ...
        'geospatial_lon_max' ...
        'geospatial_lat_min' ...
        'geospatial_lat_max' ...
        'time_coverage_start' 'time_coverage_end' ...       
        'geospatial_vertical_min' 'geospatial_vertical_max' ...
        'vertical_datum' 'geospatial_vertical_units' 'dataformat_version' 'netcdf_version' 'data_size' ...
        'distribution_website' 'distribution_protocol' ...
        'geospatial_vertical_resolution' 'grid_resolution' ...
        'grid_resolution_units'};
    
    % Define a cell array that contains the data for insertion
    addData = {ncreadatt(ncfile,'/','platform_code') ncreadatt(ncfile,'/','id') datasetName ncreadatt(ncfile,'/','institution_edmo_code') ...
        '134' '134' '134' ...
        ncreadatt(ncfile,'/','featureType') strrep(ncreadatt(ncfile,'/','reference_system'),'EPSG:', '') ncreadatt(ncfile,'/','title') ...
        datestr(strrep(strrep(ncreadatt(ncfile,'/','date_modified'),'T',' ' ),'Z', ''),'yyyy-mm-dd') ncreadatt(ncfile,'/','summary') ...
        'RFVL' '303' ncreadatt(ncfile,'/','source') ncreadatt(ncfile,'/','source_platform_category_code') ...
        ncreadatt(ncfile,'/','project') 'LS' ncreadatt(ncfile,'/','site_code') station_data{station_idx,find(not(cellfun('isempty', strfind(station_columnNames, 'operational_from'))))} ...
        network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'operational_from'))))} ...
        station_data{station_idx,find(not(cellfun('isempty', strfind(station_columnNames, 'temporal_resolution'))))} ...
        'minutes' network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'geospatial_lon_min'))))} ...
        network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'geospatial_lon_max'))))} ...
        network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'geospatial_lat_min'))))} ...
        network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'geospatial_lat_max'))))} ...
        datestr(startDate,'yyyy-mm-dd') datestr(strrep(strrep(ncreadatt(ncfile,'/','time_coverage_end'),'T',' ' ),'Z', ''),'yyyy-mm-dd') ...
        str2double(ncreadatt(ncfile,'/','geospatial_vertical_min')) str2double(ncreadatt(ncfile,'/','geospatial_vertical_max')) ...
        'mean sea level' 'ULAA' 'CF' ncreadatt(ncfile,'/','netcdf_version') datasetSize/1024 ...
        ncread(ncfile,'SDN_REFERENCES') 'download' ...
        str2double(ncreadatt(ncfile,'/','geospatial_vertical_resolution')) network_data{network_idx,find(not(cellfun('isempty', strfind(network_columnNames, 'grid_resolution'))))} ...
        'ULKM'};
    
    % Write the CDI configuration info into the radial_CDIconf_tb table on the database.
    tablename = 'radial_CDIconf_tb';
    datainsert(conn,tablename,addColnames,addData);
    disp(['[' datestr(now) '] - - ' 'radial_CDIconf_tb table successfully updated with metadata for CDI generation.']);
catch err
    disp(['[' datestr(now) '] - - ERROR in ' mfilename ' -> ' err.message]);
    CDIrDB_err = 1;
end

%%

if(CDIrDB_err==0)
    disp(['[' datestr(now) '] - - ' 'SDC_CDI_radials_metadata_to_DB successfully executed.']);
end